Git is a version control system.

Git helps you keep track of code changes.

Git is used to collaborate on code.

#    What is a Branch?
#        A branch in Git is essentially a pointer to a specific commit in your repository. It allows you to diverge from the main line of development (usually the main or master branch) and work on new features, bug fixes, or experiments without affecting the main codebase.

#    Why Use Branches?
#        Isolation: Changes made in a branch do not affect other branches until you merge them.
#        Collaboration: Multiple developers can work on different branches simultaneously without interfering with each other’s work.
#        Experimentation: You can try out new ideas in a branch and discard them if they don’t work out.

#    Branching Strategy:
#        Common strategies include:
#            Feature Branching: Create a new branch for each new feature.
#            Release Branching: Create branches for preparing releases.
#            Hotfix Branching: Create branches for urgent fixes.

Git Tutorial 6: Branches (Create, Merge, Delete a branch) at: https://www.youtube.com/watch?v=sgzkY5vFKQQ&t=103s
Git & GitHub Tutorial for Beginners #8 - Branches at: https://www.youtube.com/watch?v=QV0kVNvkMxc
What are Git branches? | A lecture for beginners at: https://www.youtube.com/watch?v=ThpSIYuYfZ8
GitLens Tutorial; how to Use GitLens extesion in VS Code at: https://www.youtube.com/watch?v=UQPb73Zz9qk

    kind of branch
    |            |
    |            |
main branch~~Experimental branch: Don't afect the main code
    |            |
    |            |
    B            b
    |            |
    ------MB------

Local and Remote Branches

    Local Branches:
        'main' and 'experimental' are local branches that exist on your development machine.
        'B' and 'b' represent the local versions of these branches
         'Bb' Merge

Remote Branches:

    'B' and 'b' also represent the corresponding branches on the remote repository (e.g., GitHub).
    When you push your local branches to the remote repository, they become origin/main and origin/experimental, where origin is the default name for the remote repository.

Visual Representation

Local Branches:

    main (B) ---------------------(Remote: origin/main)----------------
    |                                                                 |
    |                                                                 |'Bb' Merge form 'experimental (b)' to 'main (B)'
    |                                                                 |
    experimental (b) -------------(Remote: origin/experimental---------


main branch:
Definition: The main branch (In 2020, GitHub announced that it would change the default branch name for new repositories from "master" to "main.") is typically the default branch in a repository. It represents the stable, production-ready state of the code.
Purpose: This branch is where the final, tested, and approved code resides. It is the version of the project that is deployed or released to users

Experimental branch (Don't affect the main code): 
Definition: An experimental branch is a branch created for testing new ideas, features, or changes that are not yet ready for production.
Purpose: This branch allows developers to explore new concepts, try out different implementations, or work on features that may not be fully defined. It is a space for innovation and experimentation without affecting the stable codebase.

# Install git
bash:
sudo apt update
sudo apt install git
git --version

If it’s not installed, you can download it from 'git-scm.com'.
# Create a repository locally at: https://www.youtube.com/watch?v=vbQ2bYHxxEA

# Glone a locally repository to a remote one
bash:
mkdir my-repo # Create a New Directory
cd my-repo
git init # Initialize the Repository
git checkout -b new-branch-name # Create and Switch in One Command
git add .
git commit -m "This is to upload the created 'new branch new-branch-name' on the remote repository"
echo "# My Repository" > README.md # You can now add files to your repository.
git add README.md # Then, add the file to the staging area (index):
git commit -m "Initial commit on my-branch" # Now, commit the changes
git remote add origin https://github.com/username/my-repo.git #(Optional) Add to a Remote Repository
git remote set-url origin https://github.com/username/repository.git # Update the Remote URL 
git push -u origin my-branch # Push Your Branch to the Remote Repository

# Summary
#    Create a directory and navigate into it.
#    Initialize a Git repository with git init.
#    Create and switch to a new branch with git checkout -b my-branch.
#    Add files and commit your changes.
#    (Optional) Add a remote repository and push your branch.
#    Update the Remote URL
#    git push origin my-branch (Give your user_name and password)
# Now you have a local Git repository with a specified branch!

# **** If you initialize the repository with a README file or other files, those will be committed to the main branch by default. You can always create new branches later as needed for development or feature work
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
##### 
Work with github branches:
bash:
git branch # List branch
git branch  # This will display all local branches
git branch -r # To see all remote branches
git branch -a # To view both local and remote branches
git remote -v # You can list the remote repositories configured for your local clone
git branch -vv # For a more detailed output, including commit IDs and messages
git branch <new-branch-name> # Create a New Branch
git checkout <new-branch-name> # Switch to a Branch
git checkout -b <new-branch-name> # Create and Switch in One Command
git push -u origin <branch-name> # The -u flag sets the upstream tracking reference, which makes future pushes easier (you can just use git push without specifying the branch).

# Delete branches
git push origin --delete <old-branch-name>  # Delete the old branch from the remote
git push origin --delete <old-branch-name> # Delete the Old Branch from the Remote (if need,Deletes a remote branch
git branch -d <new-branch-name> # Delete a Branch ( Deletes a local branch)
git branch -D <new-branch-name> # Forcefully delete a branch regardless of its merge status
git pull/push --set-upstream origin <branch-name> # After running the command above, you can simply use 'git push' or 'git pull'

# Rename branches
git fetch origin <branch-name> # To update the remote repository to the local one before to rename a branch
git branch -m <new-branch-name> # Rename the Current Branch
git branch -M <branch-name> # Force to rename the Current Branch
git branch -m <old-branch-name> <new-branch-name> # To rename a branch that you are not currently on
git push origin <branch-name> # Push the Renamed Branch to GitHub
git push -u origin <new-branch-name> #Push the Renamed Branch to the Remote: After renaming the branch
git push origin --delete <old-branch-name> # Delete the Old Branch from the Remote
git push -u origin <branch-name> # Set Upstream for the New Branch
git log # View Commit History
git log --oneline # View a Simplified Commit History

# Example Workflow:
git fetch origin                          # Fetch the latest changes
git branch -m <new-branch-name>             # Rename the current branch
git branch -M <new-branch-name>             # Force rename the current branch
git branch -m old-branch-name <new-branch-name>  # Rename a different branch
git push -u origin new-branch-name        # Push the renamed branch to the remote

# ****Renaming Branches:
When you rename a branch in your local Git repository, that change only affects your local environment. If the branch has already been pushed to a remote repository (like GitHub, GitLab, etc.), the remote still has the old branch name. To synchronize the changes, you need to push the renamed branch to the remote repository

# **** Best Practices
1 - Pull Before Push: This helps to avoid conflicts and ensures that you are working with the latest code

--set-upstream: This option is used to set the upstream (or tracking) branch for the local branch. This means local branch-name is link to remote branch-name now. You can use git push and git pull without specifying the remote and branch name again. It simplifies future interactions with the remote branch

gir restore file_name.type

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Using Git Locally
# Example Workflow:
bash:
cd path/to/your/repository      # Navigate to Your Cloned Repository
git status                      # Check the status of your repo
git add .                       # Stage all changes or also 'git add "path/file.type'
git commit -m "Your message"    # Commit your changes
git pull origin branch-name     # Pull latest changes from remote
git push origin branch-name     # Push your changes to remote (Resolve any conflicts if necessary)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Merge
git merge <feature-branch> # Merging the Branch
git log --oneline # Verify the Merge
git add path/to/resolved-file # Resolve Conflicts (if any)
git commit -m "Resolved merge conflicts" # Complete the Merge
git push origin <branch-name>

# **** Resolve Conflicts: If you encounter merge conflicts during a git pull, you will need to resolve them before you can push your changes.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Git configuration settings
git config --list

# Check your global Git username:
bash:
git config --global user.name

# Check your global Git email:
bash:
git config --global user.email

# Check the local Git username:
bash:
git config user.name

# Check the local Git email:
bash:
git config user.email

# Set your global username:
bash:
git config --global user.name "Your Name"

# Set your global email:
bash:
git config --global user.email "your.email@example.com"
git push -u origin main

# Verify Your Git Configuration for global settings
bash:
git config --global --list

# Verify Your Git Configuration for locally settings
bash:
git config --list
